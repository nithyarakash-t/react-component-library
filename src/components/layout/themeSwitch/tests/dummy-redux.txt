// File: src\components\layout\themeSwitch\Themecontext.tsx
import React, { createContext, useContext, useEffect, useState } from "react";

export type Theme = 'light' | 'dark';
type ThemeContextType = {
    theme:Theme,
    setTheme: React.Dispatch<React.SetStateAction<Theme>>
}
const STORAGE_KEY = "theme-preference";
const ThemeContext = createContext<ThemeContextType | undefined>(undefined);

export const ThemeProvider: React.FC<{ children: React.ReactNode }> = ({children}) => {
    const [theme, setTheme] = useState<Theme>(getColorPreference() ?? 'light');

    useEffect(()=>{
        localStorage.setItem(STORAGE_KEY, theme);
        document.documentElement.setAttribute('data-theme', theme);
  
        const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');
        const handleChange = ({matches:isDark}) => {
          setTheme(isDark ? 'dark' : 'light');
        };
        
        mediaQuery.addEventListener('change', handleChange);
        
        // Cleanup function to remove the listener
        return () => {
            mediaQuery.removeEventListener('change', handleChange);
        };
    },[theme])

    // get color preference on page load
    function getColorPreference() {
        if (localStorage.getItem(STORAGE_KEY)) return localStorage.getItem(STORAGE_KEY) as Theme;
        else return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
    }   

    return (
        <ThemeContext.Provider value={{ theme, setTheme }}>
          {children}
        </ThemeContext.Provider>
    );
}

// Custom hook to use the context
export const useTheme = () => {
    const context = useContext(ThemeContext);
    if (!context) {
      throw new Error("useTheme must be used within a ThemeProvider");
    }
    return context;
};

// File: src\redux\slices\themeSlice.ts
import { createSlice, PayloadAction } from '@reduxjs/toolkit';

export type Theme = 'light' | 'dark';

const STORAGE_KEY = "theme-preference";

// Helper function to get initial theme preference
function getColorPreference(): Theme {
  // Check for stored preference
  if (typeof window !== 'undefined') {
    const storedPreference = localStorage.getItem(STORAGE_KEY) as Theme | null;
    if (storedPreference) {
      return storedPreference;
    }
    
    // Fall back to system preference
    return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
  }
  
  // Default for SSR
  return 'light';
}

interface ThemeState {
  theme: Theme;
}

const initialState: ThemeState = {
  theme: getColorPreference(),
};

export const themeSlice = createSlice({
  name: 'theme',
  initialState,
  reducers: {
    setTheme: (state, action: PayloadAction<Theme>) => {
      state.theme = action.payload;
      
      // Side effects shouldn't typically be in reducers, but for simplicity:
      if (typeof window !== 'undefined') {
        localStorage.setItem(STORAGE_KEY, action.payload);
        document.documentElement.setAttribute('data-theme', action.payload);
      }
    }
  }
});

export const { setTheme } = themeSlice.actions;

export default themeSlice.reducer;

// File: src\redux\store.ts
import { configureStore } from '@reduxjs/toolkit';
import themeReducer from './slices/themeSlice';

export const store = configureStore({
  reducer: {
    theme: themeReducer,
  },
});

export type RootState = ReturnType<typeof store.getState>;
export type AppDispatch = typeof store.dispatch;

// File: src\redux\hooks.ts
import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';
import type { RootState, AppDispatch } from './store';

export const useAppDispatch = () => useDispatch<AppDispatch>();
export const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;

// File: src\components\layout\themeSwitch\ThemeInitializer.tsx
import { useEffect } from 'react';
import { useAppDispatch, useAppSelector } from '../../../redux/hooks';
import { setTheme } from '../../../redux/slices/themeSlice';

export const ThemeInitializer: React.FC = () => {
  const { theme } = useAppSelector(state => state.theme);
  const dispatch = useAppDispatch();
  
  // Set up event listener for system preference changes
  useEffect(() => {
    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');
    
    const handleChange = ({ matches: isDark }: MediaQueryListEvent) => {
      dispatch(setTheme(isDark ? 'dark' : 'light'));
    };
    
    // Add event listener
    mediaQuery.addEventListener('change', handleChange);
    
    // Initial application of theme
    document.documentElement.setAttribute('data-theme', theme);
    
    // Cleanup
    return () => {
      mediaQuery.removeEventListener('change', handleChange);
    };
  }, [dispatch]);
  
  return null; // This component doesn't render anything
};

// File: src\App.tsx
import { Provider } from 'react-redux';
import { store } from './redux/store';
import { ThemeInitializer } from './components/layout/themeSwitch/ThemeInitializer';
import YourAppComponents from './YourAppComponents';

function App() {
  return (
    <Provider store={store}>
      <ThemeInitializer />
      <YourAppComponents />
    </Provider>
  );
}

export default App;

// File: src\components\layout\themeSwitch\ThemeToggle.tsx
import { useAppDispatch, useAppSelector } from '../../../redux/hooks';
import { setTheme } from '../../../redux/slices/themeSlice';

export const ThemeToggle: React.FC = () => {
  const { theme } = useAppSelector(state => state.theme);
  const dispatch = useAppDispatch();
  
  const toggleTheme = () => {
    dispatch(setTheme(theme === 'dark' ? 'light' : 'dark'));
  };
  
  return (
    <button onClick={toggleTheme}>
      Switch to {theme === 'dark' ? 'light' : 'dark'} mode
    </button>
  );
};

// File: src\components\Example.tsx
import { useAppSelector } from '../redux/hooks';

export const Example: React.FC = () => {
  const { theme } = useAppSelector(state => state.theme);
  
  return (
    <div className={`component ${theme}`}>
      Current theme: {theme}
    </div>
  );
};