import { useState, createContext, useContext, ReactNode, useRef } from 'react';
import './Accordion.scss';

/***Accordion***/
interface AccordionContextType {
    accordionId: string;
}

const AccordionContext = createContext<AccordionContextType | undefined>(undefined);

export interface AccordionProps {
    accordionId: string;
    customClass?: string;
    children?: ReactNode;
}

export function Accordion({ accordionId, customClass, children }: AccordionProps) {
    return (
        <AccordionContext.Provider value={{ accordionId }}>
            <div className={`c-accordion__wrap ${customClass || ''}`} id={accordionId}>
                {children}
            </div>
        </AccordionContext.Provider>
    );
}

/***Collapse***/
interface CollapseContextType {
    collapseId: string;
    isOpen: boolean;
    toggleCollapse: () => void;
    // Add a nesting level indicator
    nestingLevel: number;
}

const CollapseContext = createContext<CollapseContextType | undefined>(undefined);

export interface CollapseProps {
    customClass?: string;
    collapseId: string;
    open?: boolean;
    children: ReactNode;
}

export function Collapse({ customClass, collapseId, open = false, children }: CollapseProps) {
    const [isOpen, setIsOpen] = useState(open);
    const accordionContext = useContext(AccordionContext);
    const parentCollapseContext = useContext(CollapseContext);
    const toggleCollapse = () => setIsOpen(!isOpen);
    
    // Calculate nesting level based on parent context
    const nestingLevel = parentCollapseContext ? parentCollapseContext.nestingLevel + 1 : 0;
    
    // Only use the accordion's ID if we're at the top level (direct child)
    const effectiveParentId = nestingLevel === 0 ? accordionContext?.accordionId : undefined;
    
    return (
        <CollapseContext.Provider value={{ collapseId, isOpen, toggleCollapse, nestingLevel }}>
            <div className={`c-collapse__wrap ${customClass || ''}`} data-parentid={effectiveParentId}>
                {children}
            </div>
        </CollapseContext.Provider>
    );
}

export interface CollapseControlProps {
    children: ReactNode;
}

export function CollapseControl({ children }: CollapseControlProps) {
    const context = useContext(CollapseContext);
    
    if (!context) {
        throw new Error('CollapseControl must be used within a Collapse component');
    }
    
    const { isOpen, toggleCollapse, collapseId } = context;
    
    return (
        <button type='button' 
            className='c-collapse__control'
            onClick={toggleCollapse}
            aria-controls={collapseId}
            aria-expanded={isOpen}
        >
            {children}
        </button>
    );
}

export interface CollapseContentProps {
    children: ReactNode;
}

export function CollapseContent({ children }: CollapseContentProps) {
    const context = useContext(CollapseContext);
    
    if (!context) {
        throw new Error('CollapseContent must be used within a Collapse component');
    }
    
    const { isOpen, collapseId } = context;
    
    return (
        <div id={collapseId} className='c-collapse__contentouter' data-open={isOpen}>
            <div className='c-collapse__contentinner'>
                <div className='c-collapse__content'>
                    {children}
                </div>
            </div>
        </div>
    );
}